name: Docker Image CI

on:
  push:
    branches: 
      - develop

env: 
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY_DEV: ${{ secrets.ECR_REPOSITORY_DEV }}
  ECR_REPOSITORY_PROD: ${{ secrets.ECR_REPOSITORY_PROD }}

jobs:

  build-artifact:
    
    name: build ${{ matrix.image }}
    runs-on: ubuntu-latest
    outputs:
      update: ${{ steps.step-to-true.outputs.condition }}

    strategy:
      matrix:
        include:
          - image: graph
            context: .
            file: graph/Dockerfile
            version-file: graph/
          - image: admin
            context: .
            file: admin/Dockerfile
            version-file: admin/
          - image: async
            context: .
            file: async/Dockerfile
            version-file: async/
          - image: store
            context: .
            file: store/Dockerfile
            version-file: store/
          - image: migrate
            context: .
            file: migrate/Dockerfile
            version-file: migrate/
          - image: jobrunner
            context: .
            file: jobrunner/Dockerfile
            version-file: jobrunner/
          - image: front
            context: app
            file: app/fbcnms-projects/platform-server/Dockerfile.prod
            version-file: app/fbcnms-projects/platform-server/
          - image: docs
            context: docs
            file: docs/Dockerfile
            version-file: docs/
          - image: storybook
            context: app
            file: app/fbcnms-projects/storybook/Dockerfile
            version-file: app/fbcnms-projects/storybook/

    steps:
      - uses: actions/checkout@v2

      - name: Extracting version
        run: echo "ACTUAL=${{ matrix.image }}-v$(cat ${{ matrix.version-file }}version.yml | sed 's/version//g' | sed 's/://g' | sed 's/ //g')" >> $GITHUB_ENV

      - name: Configure AWS Credentials for build and deploy ECR 42
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Login ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Getting Lastest version in ECR
        run: echo "LATEST=$(aws ecr list-images --repository-name $ECR_REPOSITORY_DEV | jq '.imageIds | map (.imageTag) | .[]' | grep ${{ matrix.image }} | sed 's/"//g' | tail -n 1)" >> $GITHUB_ENV
  
      - name: Showing Variables
        run: |
          echo "Latest " ${{ env.LATEST}}
          echo "Actual " ${{ env.ACTUAL}}

      - id: step-to-true
        name: Setting estatus to true
        if : ${{ env.LATEST!=env.ACTUAL }}
        run: echo "::set-output name=condition::true"


      - name: Showing condition
        run: echo ${{ steps.step-to-true.outputs.condition }}

      - name: Docker build and Push
        if : ${{ env.LATEST!=env.ACTUAL }}
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_DEV }}:${{ env.ACTUAL}}
          pull: true
          push: true

  updating-values:

    needs: build-artifact
    if : ${{ needs.build-artifact.outputs.update == 'true' }}
    name: Update image tag in values.yaml
    runs-on: ubuntu-latest

    steps:

      - name: Checkout repo
        uses: actions/checkout@v2
      
      - name: Setting version in values.yaml
        run: |
          yq --version
          bash script2.sh

      - name: Commit files
        run: |
          git config --local user.email "${{ secrets.EMAIL_TOKEN }}"
          git config --local user.name "ja80rincon"
          git add .
          git commit -m "actualizacion en values.yaml" 

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
           github_token: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
           branch: ${{ github.ref }}

  publish-image-production:

    needs: [build-artifact,updating-values]
    if : ${{ needs.build-artifact.outputs.update == 'true' }}
    name: Pushing ${{ matrix.image }} to production
    runs-on: ubuntu-latest
 
    strategy:
      matrix:
        include:
          - image: graph
            context: .
            file: graph/Dockerfile
            version-file: graph/
          - image: admin
            context: .
            file: admin/Dockerfile
            version-file: admin/
          - image: async
            context: .
            file: async/Dockerfile
            version-file: async/
          - image: store
            context: .
            file: store/Dockerfile
            version-file: store/
          - image: migrate
            context: .
            file: migrate/Dockerfile
            version-file: migrate/
          - image: jobrunner
            context: .
            file: jobrunner/Dockerfile
            version-file: jobrunner/
          - image: front
            context: app
            file: app/fbcnms-projects/platform-server/Dockerfile.prod
            version-file: app/fbcnms-projects/platform-server/
          - image: docs
            context: docs
            file: docs/Dockerfile
            version-file: docs/
          - image: storybook
            context: app
            file: app/fbcnms-projects/storybook/Dockerfile
            version-file: app/fbcnms-projects/storybook/

    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS Credentials for build and deploy ECR 42
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Login ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
      
      - name: Getting Lastest_prod version in ECR
        run: echo "LATEST_PROD=$(aws ecr list-images --repository-name $ECR_REPOSITORY_PROD | jq '.imageIds | map (.imageTag) | .[]' | grep ${{ matrix.image }} | sed 's/"//g' | tail -n 1)" >> $GITHUB_ENV

      - name: Getting Lastest_dev version in ECR
        run: echo "LATEST_DEV=$(aws ecr list-images --repository-name $ECR_REPOSITORY_DEV | jq '.imageIds | map (.imageTag) | .[]' | grep ${{ matrix.image }} | sed 's/"//g' | tail -n 1)" >> $GITHUB_ENV  

      - name: Showing Variables
        run: |
          echo "Latest dev " ${{ env.LATEST_DEV}}
          echo "Latest prod " ${{ env.LATEST_PROD}}

      - name: pull imagenes deL ECR AWS
        if: ${{ env.LATEST_DEV!=env.LATEST_PROD }}
        run:  docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_DEV }}:${{ env.LATEST_DEV }}

      - name: docker tag  y push al registry
        if: ${{ env.LATEST_DEV!=env.LATEST_PROD }}
        run: |
              docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_DEV }}:${{ env.LATEST_DEV }} ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PROD }}:${{ env.LATEST_DEV }}
              docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PROD }}:${{ env.LATEST_DEV }}
  
  updating-values-prod:

    #needs: [build-artifact,updating-values,publish-image-production,publish-image-production]
    # if : ${{ needs.build-artifact.outputs.update == 'true' }}
    name: Update image tag in values.yaml
    runs-on: ubuntu-latest
    steps:
          
      - name: Checkout
        uses: actions/checkout@v3

    # - name: Saliendo del repo
    #   run: |
    #     ls
    #     echo "$PWD"
    #     cd ..
    #     ls
      
    # - name: Saliendo del repo
    #   run: |
    #     ls


    # - name: Checkout private tools
    #   uses: actions/checkout@v3
    #   with:
    #     repository: javiermartinezgi01/repoTest
    #     token: ${{ secrets.GIT_HUB_TOKEN }} # `GH_PAT` is a secret that contains your PAT


    # - name: Saliendo del repo
    #   run: |
    #     ls
    #     cd..
    #     ls
  
    # - name: Saliendo del repo
    #   run: |
    #     ls
      # ls /home/runner/work/EcrSymphony/EcrSymphony
      # echo "$PWD"
      # git config user.email "javiermartinezgi01@gmail.com"
      # git config user.name "javiermartinezgi01"
      # git status
      # bash script_prod.sh
      # git add .
      # git commit -m "test commit"
      # git push

      - name: Clone GuillaumeFalourd/formulas-training PRIVATE repository
        uses: GuillaumeFalourd/clone-github-repo-action@v2
        with:
          owner: 'javiermartinezgi01'
          repository: 'repoTest'
          access-token: ${{ secrets.GIT_HUB_TOKEN }}
      - name: list archivos
        run : ls -la
      # - name: ingreso al repo
      #   run: |
      #       cd  repoTest
      #       ls
      #       bash script_prod_1.sh
      #       cat values.yaml    

      # - name: Config emalil and user github
      #   run: |

      #     cd repoTest
      #     git config --local user.email "javiermartinezgi01@gmail.com"
      #     git config --local user.name "javiermartinezgi01"
      #     git commit -m "actualizacion values"

      # - name: Saliendo del repo
      #   run: |
      #     ls

      # - name: Setting version in values.yaml
      #   run: |
      #     ls
      #     bash script_prod.sh

      # - name: Moving to dir repoTest
      #   run: |
      #     cd ..
      #     ls 
      #     cd repoTest
      #     cat values.yaml

      # - name: Commit files
      #   run: |
      #     git add .
      #     git commit -m "actualizacion en values.yaml" 

      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #      github_token: ${{ secrets.GIT_HUB_TOKEN}}
      #      branch: main  