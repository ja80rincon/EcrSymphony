name: Docker Image CI

on:
  push:
    branches: 
      - develop

jobs:

  build-artifact:
    
    name: build ${{ matrix.image }}
    runs-on: ubuntu-latest

    env: 
      ECR_REGISTRY: 837232691946.dkr.ecr.us-east-2.amazonaws.com
      ECR_REPOSITORY: symphony-ecr-aws
         
    strategy:
      matrix:
        include:
          - image: graph
            context: .
            file: graph/Dockerfile
            version-file: graph/
          - image: admin
            context: .
            file: admin/Dockerfile
            version-file: admin/
          - image: async
            context: .
            file: async/Dockerfile
            version-file: async/
          - image: store
            context: .
            file: store/Dockerfile
            version-file: store/
          - image: migrate
            context: .
            file: migrate/Dockerfile
            version-file: migrate/
          - image: jobrunner
            context: .
            file: jobrunner/Dockerfile
            version-file: jobrunner/
          - image: front
            context: app
            file: app/fbcnms-projects/platform-server/Dockerfile.prod
            version-file: app/fbcnms-projects/platform-server/
          - image: docs
            context: docs
            file: docs/Dockerfile
            version-file: docs/
          - image: storybook
            context: app
            file: app/fbcnms-projects/storybook/Dockerfile
            version-file: app/fbcnms-projects/storybook/

    steps:
      - uses: actions/checkout@v2

      # - uses: docker/setup-buildx-action@v1
      # - uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: ${{ runner.os }}-buildx-

      # - name: Installing yq
      #   run: wget https://github.com/mikefarah/yq/releases/download/v4.2.0/yq_linux_amd64 -O /usr/bin/yq &&\chmod +x /usr/bin/yq

      # - name: Extracting version
      #   run: echo "TAG=$(yq eval '.version' ${{ matrix.version-file }}version.yml)" >> $GITHUB_ENV

      - name: Configure AWS Credentials for build and deploy ECR 42
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Amazon ECR "Login" Action for GitHub Actions
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Login ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Getting Lastest version in ECR
        run: |
          aws ecr list-images --repository-name $ECR_REPOSITORY | jq '.imageIds | map (.imageTag)| sort|.[]' | sort -r | grep ${{ matrix.image }} | sed 's/"//g'
          
      # echo "LATEST=$(aws ecr list-images --repository-name $ECR_REPOSITORY | jq '.imageIds | map (.imageTag)| sort|.[]' | sort -r | grep ${{ matrix.image }} | sed 's/"//g')" >> $GITHUB_ENV
      # echo "ACTUAL=${{ matrix.image }}-v${{ env.TAG }}" >> $GITHUB_ENV
  
      # - name: mostrando las variables
      #   run: |
      #     echo ${{ env.LATEST}}
      #     echo ${{ env.ACTUAL}}

      # - name: Docker build and Push
      #   if : ${{ env.LATEST!=env.ACTUAL }}
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ${{ matrix.context }}
      #     file: ${{ matrix.file }}
      #     tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ matrix.image }}-v${{ env.TAG}}
      #     pull: true
      #     push: true
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

