USER-SUPPLIED VALUES:
COMPUTED VALUES: null
USER-SUPPLIED VALUES: null
admin:
  affinity: {}
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: admin-v1.3
  networkPolicy:
    allowExternal: false
    enabled: true
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: true
    maxUnavailable: ""
    minAvailable: 1
  probes:
    liveness:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 3
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  replicas: 1
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    metrics:
      port: 9464
      targetPort: 9464
    port: 80
    profile:
      port: 6060
    targetPort: 8080
  serviceAccount:
    annotations: {}
    create: true
    name: symphony-admin
  spec:
    log:
      format: json
      level: debug
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
async:
  affinity: {}
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: f82e4e55ec1725f342023124e95b8c258a1df1e2
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: true
    maxUnavailable: ""
    minAvailable: 1
  probes:
    liveness:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 3
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  replicas: 1
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    metrics:
      port: 9464
      targetPort: 9464
    port: 80
    profile:
      port: 6060
    targetPort: 8080
  serviceAccount:
    annotations: {}
    create: true
    name: symphony-async
  spec:
    cadence:
      address: cadence-frontend.cadence.svc.cluster.local:7933
    event:
      pub_url: nats://graph.event
      sub_url: nats://graph.event?queue=async
    export:
      bucket_prefix: exports/
      bucket_url: s3://store.blobs?region=us-central1&endpoint=minio.telecomopennetworks.com/poc-som-cem
    extraEnvVars:
    - name: NATS_SERVER_URL
      value: nats://nats.nats.svc.cluster.local
    - name: AWS_ACCESS_KEY_ID
      value: admin
    - name: AWS_SECRET_ACCESS_KEY
      value: password
    log:
      format: json
      level: debug
    tenancy:
      tenantMaxDBConn: 5
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
docs:
  affinity: {}
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: docs-v1.9
  nodeSelector: {}
  podAnnotations: {}
  probes:
    liveness:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 3
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 64Mi
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
  service:
    metrics:
      port: 9464
      targetPort: 9464
    port: 80
    targetPort: 8080
  serviceAccount:
    annotations: {}
    create: true
    name: symphony-docs
  tolerations: []
  updateStrategy:
    type: RollingUpdate
front:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 3
    metrics: []
    minReplicas: 1
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: front-v1.8
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: true
    maxUnavailable: ""
    minAvailable: 1
  probes:
    liveness:
      failureThreshold: 5
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    path: /healthz
    readiness:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 3
  replicas: 2
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    internal:
      port: 1030
      targetPort: 1030
    metrics:
      port: 9464
      targetPort: 9464
    port: 80
    targetPort: 8080
  serviceAccount:
    annotations: {}
    create: true
    name: symphony-front
  spec:
    extraEnvVars:
    - name: FB_TEST_USER
      value: mfrutoam@emeal.nttdata.com
    log:
      level: info
    mapbox:
      access_token: pk.eyJ1IjoiZGFyZXN0cmVwb3YiLCJhIjoiY2tqMDc4ODA0MGFubzMwbG51bjU0cHh4diJ9.dS1i0H6AdgMozlUE01QJMA
    mysql:
      db: auth
      host: symphony-db.cz5uza2a9uzm.us-west-2.rds.amazonaws.com
      pass: Symph0ny
      port: 3306
      user: symphony
    proxy:
      logger: fluentd.symphony.svc.cluster.local:9880
    session_token: fhcfvugnlkkgntihvlekctunhbbdbjiu
  tolerations: []
  updateStrategy:
    type: RollingUpdate
fullnameOverride: ""
global:
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    tag: f82e4e55ec1725f342023124e95b8c258a1df1e2
  imagePullSecrets: []
graph:
  affinity: {}
  autoscaling:
    enabled: false
    maxReplicas: 3
    metrics: []
    minReplicas: 1
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: graph-v1.12
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: true
    maxUnavailable: ""
    minAvailable: 1
  probes:
    liveness:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 3
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  replicas: 4
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    metrics:
      port: 9464
      targetPort: 9464
    port: 80
    profile:
      port: 6060
    targetPort: 8080
  serviceAccount:
    annotations: {}
    create: true
    name: symphony-graph
  spec:
    event:
      url: nats://graph.event
    extraEnvVars:
    - name: NATS_SERVER_URL
      value: nats://nats.nats.svc.cluster.local
    log:
      format: json
      level: debug
    tenancy:
      tenantMaxDBConn: 1000
  tolerations: []
  updateStrategy:
    type: RollingUpdate
jobrunner:
  image:
    pullPolicy: null
    repository: null
    tag: jobrunner-v1.7
  jobs:
  - name: gc
    schedule: 0 * * * *
  - name: syncservices
    schedule: 0 * * * *
  resources:
    limits:
      cpu: 10m
      memory: 64Mi
  serviceAccount:
    annotations: {}
    create: true
    name: ""
migrate:
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: migrate-v1.6
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  spec:
    log:
      format: json
      level: debug
    migrations:
      cadence:
        address: cadence-frontend.cadence.svc.cluster.local:7933
        domains: flow,export
        extraEnvVars:
        - name: CADENCE_RETENTION
          value: "3"
      graph:
        extraEnvVars: []
nameOverride: ""
persistence:
  database:
    host: symphony-db.cz5uza2a9uzm.us-west-2.rds.amazonaws.com
    params:
      charset: utf8
      interpolateParams: "true"
      parseTime: "true"
      tls: "false"
    pass: Symph0ny
    port: 3306
    scheme: mysql
    user: symphony
serviceMonitor:
  additionalLabels: {}
  alerting:
    additionalLabels: {}
    rules: []
  enabled: false
  relabellings: []
store:
  affinity: {}
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: migfru
    repository: null
    tag: store-v1.5
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: true
    maxUnavailable: ""
    minAvailable: 1
  probes:
    liveness:
      failureThreshold: 5
      initialDelaySeconds: 10
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 3
    readiness:
      failureThreshold: 3
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  replicas: 1
  resources: {}
  securityContext:
    fsGroup: 65534
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  service:
    metrics:
      port: 9464
      targetPort: 9464
    port: 80
    profile:
      port: 6060
    targetPort: 8080
  serviceAccount:
    annotations: {}
    create: true
    name: symphony-store
  spec:
    bucket:
      url: s3://store.blobs?region=us-central1&endpoint=minio.telecomopennetworks.com/poc-som-cem
    extraEnvVars:
    - name: AWS_ACCESS_KEY_ID
      value: admin
    - name: AWS_SECRET_ACCESS_KEY
      value: password
    - name: BUCKET_URL
      value: s3://store.blobs?region=us-central1&endpoint=minio.telecomopennetworks.com/poc-som-cem
    log:
      format: json
      level: debug
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
tracing:
  enabled: false
  excludeSpanNames: []
  jaeger:
    agentEndpoint: ""
    agentThriftEndpoint: ""
    collectorEndpoint: ""
storybook:
  affinity: {}
  deploymentAnnotations: {}
  image:
    pullPolicy: IfNotPresent
    registry: REGISTRY
    repository: REPOSITORY
    tag: storybook-v1.10    
